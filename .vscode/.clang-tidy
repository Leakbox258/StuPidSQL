---
Checks: '-*,
        clang-analyzer-*,
        bugprone-argument-comment,
        bugprone-assert-side-effect,
        bugprone-bad-signal-to-kill-thread,
        bugprone-branch-clone,
        bugprone-copy-constructor-init,
        bugprone-dangling-handle,
        bugprone-dynamic-static-initializers,
        bugprone-fold-init-type,
        bugprone-forward-declaration-namespace,
        bugprone-forwarding-reference-overload,
        bugprone-inaccurate-erase,
        bugprone-incorrect-roundings,
        bugprone-integer-division,
        bugprone-lambda-function-name,
        bugprone-macro-parentheses,
        bugprone-macro-repeated-side-effects,
        bugprone-misplaced-operator-in-strlen-in-alloc,
        bugprone-misplaced-pointer-arithmetic-in-alloc,
        bugprone-misplaced-widening-cast,
        bugprone-move-forwarding-reference,
        bugprone-multiple-statement-macro,
        bugprone-no-escape,
        bugprone-not-null-terminated-result,
        bugprone-parent-virtual-call,
        bugprone-posix-return,
        bugprone-reserved-identifier,
        bugprone-sizeof-container,
        bugprone-sizeof-expression,
        bugprone-spuriously-wake-up-functions,
        bugprone-string-constructor,
        bugprone-string-integer-assignment,
        bugprone-string-literal-with-embedded-nul,
        bugprone-suspicious-enum-usage,
        bugprone-suspicious-include,
        bugprone-suspicious-memory-comparison,
        bugprone-suspicious-memset-usage,
        bugprone-suspicious-missing-comma,
        bugprone-suspicious-semicolon,
        bugprone-suspicious-string-compare,
        bugprone-swapped-arguments,
        bugprone-terminating-continue,
        bugprone-throw-keyword-missing,
        bugprone-too-small-loop-variable,
        bugprone-undefined-memory-manipulation,
        bugprone-undelegated-constructor,
        bugprone-unhandled-self-assignment,
        bugprone-unused-raii,
        bugprone-unused-return-value,
        bugprone-use-after-move,
        bugprone-virtual-near-miss,
        cert-dcl59-cpp,
        cert-dcl58-cpp,
        cert-err34-c,
        cert-err52-cpp,
        cert-err58-cpp,
        cert-err60-cpp,
        cert-flp30-c,
        cert-msc50-cpp,
        cert-msc51-cpp,
        cert-str34-c,
        cppcoreguidelines-interfaces-global-init,
        cppcoreguidelines-narrowing-conversions,
        cppcoreguidelines-pro-type-member-init,
        cppcoreguidelines-pro-type-static-cast-downcast,
        cppcoreguidelines-slicing,
        google-default-arguments,
        google-explicit-constructor,
        google-runtime-operator,
        hicpp-exception-baseclass,
        hicpp-multiway-paths-covered,
        misc-unused-includes,
        misc-misplaced-const,
        misc-new-delete-overloads,
        misc-no-recursion,
        misc-non-copyable-objects,
        misc-throw-by-value-catch-by-reference,
        misc-unconventional-assign-operator,
        misc-uniqueptr-reset-release,
        modernize-avoid-bind,
        modernize-concat-nested-namespaces,
        modernize-deprecated-headers,
        modernize-deprecated-ios-base-aliases,
        modernize-loop-convert,
        modernize-make-shared,
        modernize-make-unique,
        modernize-pass-by-value,
        modernize-raw-string-literal,
        modernize-redundant-void-arg,
        modernize-replace-auto-ptr,
        modernize-replace-disallow-copy-and-assign-macro,
        modernize-replace-random-shuffle,
        modernize-return-braced-init-list,
        modernize-shrink-to-fit,
        modernize-unary-static-assert,
        modernize-use-auto,
        modernize-use-bool-literals,
        modernize-use-emplace,
        modernize-use-equals-default,
        modernize-use-equals-delete,
        modernize-use-nodiscard,
        modernize-use-noexcept,
        modernize-use-nullptr,
        modernize-use-override,
        modernize-use-transparent-functors,
        modernize-use-uncaught-exceptions,
        mpi-buffer-deref,
        mpi-type-mismatch,
        openmp-use-default-none,
        performance-faster-string-find,
        performance-for-range-copy,
        performance-implicit-conversion-in-loop,
        performance-inefficient-algorithm,
        performance-inefficient-string-concatenation,
        performance-inefficient-vector-operation,
        performance-move-const-arg,
        performance-move-constructor-init,
        performance-no-automatic-move,
        performance-noexcept-move-constructor,
        performance-trivially-destructible,
        performance-type-promotion-in-math-fn,
        performance-unnecessary-copy-initialization,
        performance-unnecessary-value-param,
        portability-simd-intrinsics,
        readability-avoid-const-params-in-decls,
        readability-const-return-type,
        readability-container-size-empty,
        readability-convert-member-functions-to-static,
        readability-delete-null-pointer,
        // readability-deleted-default,
        readability-inconsistent-declaration-parameter-name,
        readability-make-member-function-const,
        readability-misleading-indentation,
        readability-misplaced-array-index,
        readability-non-const-parameter,
        readability-redundant-control-flow,
        readability-redundant-declaration,
        readability-redundant-function-ptr-dereference,
        readability-redundant-smartptr-get,
        readability-redundant-string-cstr,
        readability-redundant-string-init,
        readability-simplify-subscript-expr,
        readability-static-accessed-through-instance,
        readability-static-definition-in-anonymous-namespace,
        readability-string-compare,
        readability-uniqueptr-delete-release,
        readability-use-anyofallof'
        
WarningsAsErrors: ''
HeaderFilterRegex: ''
CheckOptions:
  # 现代化（Modernize）
  - key:             modernize-redundant-void-arg
    value:           'true'  # 检查并移除函数声明中冗余的 void 参数。
  - key:             modernize-use-bool-literals
    value:           'true'  # 建议使用布尔字面量 true 和 false 代替整数值 0 和 1。
  - key:             modernize-use-equals-default
    value:           'true'  # 建议在默认构造函数、复制构造函数和赋值运算符中使用 = default，以简化代码。
  - key:             modernize-use-nullptr
    value:           'true'  # 建议使用 nullptr 代替 NULL 或 0 来表示空指针。
  - key:             modernize-use-override
    value:           'true'  # 建议在覆盖基类虚函数时使用 override 关键字，以增加代码的清晰性和安全性。

  # Google 代码风格（Google）
  - key:             google-explicit-constructor
    value:           'true'  # 检查并建议在单参数构造函数中使用 explicit 关键字，以防止隐式转换。
  - key:             google-readability-casting
    value:           'true'  # 检查并建议使用 C++ 风格的类型转换（如 static_cast、dynamic_cast、const_cast 和 reinterpret_cast）代替 C 风格的类型转换。

  # 可读性（Readability）
  - key:             readability-identifier-naming.ClassCase
    value:           'CamelCase'  # 类名应使用 CamelCase 风格，例如 MyClassName。
  - key:             readability-identifier-naming.StructCase
    value:           'CamelCase'  # 结构体名应使用 CamelCase 风格，例如 MyStructName。
  - key:             readability-identifier-naming.TypedefCase
    value:           'CamelCase'  # 类型定义应使用 CamelCase 风格，例如 MyTypeDef。
  - key:             readability-identifier-naming.EnumCase
    value:           'CamelCase'  # 枚举名应使用 CamelCase 风格，例如 MyEnumName。
  - key:             readability-non-const-parameter
    value:           'true'  # 检查并标识非 const 参数，以提高代码的可读性和安全性。

  # CERT 安全编码标准（CERT）
  - key:             cert-dcl21-cpp
    value:           'true'  # 检查并标识在头文件中不应包含无命名空间的 using 声明和指令，以防止命名空间污染。

  # Bug 检测（Bugprone）
  - key:             bugprone-undelegated-constructor
    value:           'true'  # 检查并标识未委托的构造函数，以确保构造函数的正确性。
  - key:             bugprone-macro-parentheses
    value:           'true'  # 检查并建议在宏定义中使用括号，以防止潜在的错误。
  - key:             bugprone-macro-repeated-side-effects
    value:           'true'  # 检查并标识宏中重复的副作用，以防止潜在的错误。
  - key:             bugprone-forward-declaration-namespace
    value:           'true'  # 检查并标识命名空间前向声明的潜在问题。
  - key:             bugprone-bool-pointer-implicit-conversion
    value:           'true'  # 检查并标识布尔指针的隐式转换，以防止潜在的错误。
  - key:             bugprone-misplaced-widening-cast
    value:           'true'  # 检查并标识错误的宽化转换，以防止潜在的错误。

  # C++ 核心指南（CppCoreGuidelines）
  - key:             cppcoreguidelines-narrowing-conversions
    value:           'true'  # 检查并标识可能导致数据丢失的窄化转换。

  # 杂项（Miscellaneous）
  - key:             misc-unconventional-assign-operator
    value:           'true'  # 检查并标识不常见的赋值操作符重载，以确保代码的一致性和可维护性。
  - key:             misc-unused-parameters
    value:           'true'  # 检测未使用的参数。
...


